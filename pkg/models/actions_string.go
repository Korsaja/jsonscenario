// Code generated by "enumer -type=ActionFile -json -transform=snake -output=pkg/models/actions_string.go pkg/models/actions.go"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActionFileName = "unknowncreateremoverenamec_timewritecondition"

var _ActionFileIndex = [...]uint8{0, 7, 13, 19, 25, 31, 36, 45}

const _ActionFileLowerName = "unknowncreateremoverenamec_timewritecondition"

func (i ActionFile) String() string {
	if i < 0 || i >= ActionFile(len(_ActionFileIndex)-1) {
		return fmt.Sprintf("ActionFile(%d)", i)
	}
	return _ActionFileName[_ActionFileIndex[i]:_ActionFileIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionFileNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(0)]
	_ = x[Create-(1)]
	_ = x[Remove-(2)]
	_ = x[Rename-(3)]
	_ = x[CTime-(4)]
	_ = x[Write-(5)]
	_ = x[Condition-(6)]
}

var _ActionFileValues = []ActionFile{Unknown, Create, Remove, Rename, CTime, Write, Condition}

var _ActionFileNameToValueMap = map[string]ActionFile{
	_ActionFileName[0:7]:        Unknown,
	_ActionFileLowerName[0:7]:   Unknown,
	_ActionFileName[7:13]:       Create,
	_ActionFileLowerName[7:13]:  Create,
	_ActionFileName[13:19]:      Remove,
	_ActionFileLowerName[13:19]: Remove,
	_ActionFileName[19:25]:      Rename,
	_ActionFileLowerName[19:25]: Rename,
	_ActionFileName[25:31]:      CTime,
	_ActionFileLowerName[25:31]: CTime,
	_ActionFileName[31:36]:      Write,
	_ActionFileLowerName[31:36]: Write,
	_ActionFileName[36:45]:      Condition,
	_ActionFileLowerName[36:45]: Condition,
}

var _ActionFileNames = []string{
	_ActionFileName[0:7],
	_ActionFileName[7:13],
	_ActionFileName[13:19],
	_ActionFileName[19:25],
	_ActionFileName[25:31],
	_ActionFileName[31:36],
	_ActionFileName[36:45],
}

// ActionFileString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionFileString(s string) (ActionFile, error) {
	if val, ok := _ActionFileNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionFileNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActionFile values", s)
}

// ActionFileValues returns all values of the enum
func ActionFileValues() []ActionFile {
	return _ActionFileValues
}

// ActionFileStrings returns a slice of all String values of the enum
func ActionFileStrings() []string {
	strs := make([]string, len(_ActionFileNames))
	copy(strs, _ActionFileNames)
	return strs
}

// IsAActionFile returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActionFile) IsAActionFile() bool {
	for _, v := range _ActionFileValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActionFile
func (i ActionFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActionFile
func (i *ActionFile) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActionFile should be a string, got %s", data)
	}

	var err error
	*i, err = ActionFileString(s)
	return err
}
