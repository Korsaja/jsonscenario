// Code generated by "enumer -type=Result -json -transform=snake -output=internal/ffuncs/const_string.go internal/ffuncs/const.go"; DO NOT EDIT.

package ffuncs

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ResultName = "failedsuccess"

var _ResultIndex = [...]uint8{0, 6, 13}

const _ResultLowerName = "failedsuccess"

func (i Result) String() string {
	if i < 0 || i >= Result(len(_ResultIndex)-1) {
		return fmt.Sprintf("Result(%d)", i)
	}
	return _ResultName[_ResultIndex[i]:_ResultIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ResultNoOp() {
	var x [1]struct{}
	_ = x[Failed-(0)]
	_ = x[Success-(1)]
}

var _ResultValues = []Result{Failed, Success}

var _ResultNameToValueMap = map[string]Result{
	_ResultName[0:6]:       Failed,
	_ResultLowerName[0:6]:  Failed,
	_ResultName[6:13]:      Success,
	_ResultLowerName[6:13]: Success,
}

var _ResultNames = []string{
	_ResultName[0:6],
	_ResultName[6:13],
}

// ResultString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResultString(s string) (Result, error) {
	if val, ok := _ResultNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ResultNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Result values", s)
}

// ResultValues returns all values of the enum
func ResultValues() []Result {
	return _ResultValues
}

// ResultStrings returns a slice of all String values of the enum
func ResultStrings() []string {
	strs := make([]string, len(_ResultNames))
	copy(strs, _ResultNames)
	return strs
}

// IsAResult returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Result) IsAResult() bool {
	for _, v := range _ResultValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Result
func (i Result) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Result
func (i *Result) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Result should be a string, got %s", data)
	}

	var err error
	*i, err = ResultString(s)
	return err
}
